#include<SoftwareSerial.h>
SoftwareSerial myGSM(0,1);
int temp=0,i=0,x=0,k=0;
char str[100],msg[32];

unsigned char buffer[100];// buffer array for data recieve over serial port
int count =0;//counter for array array
/*

***************************************************************//Decimal table for characters//************************************************************************
 
Dec  Char                           Dec  Char     Dec  Char     Dec  Char
---------                           ---------     ---------     ----------
  0  NUL (null)                      32  SPACE      64  @   x     96  `   x
  1  SOH (start of heading)          33  !   x      65  A         97  a   
  2  STX (start of text)             34  "   x      66  B         98  b
  3  ETX (end of text)               35  #   x      67  C         99  c
  4  EOT (end of transmission)       36  $   x      68  D        100  d
  5  ENQ (enquiry)                   37  %   x      69  E        101  e
  6  ACK (acknowledge)               38  &   x      70  F        102  f
  7  BEL (bell)                      39  '   x      71  G        103  g
  8  BS  (backspace)                 40  (          72  H        104  h
  9  TAB (horizontal tab)            41  )          73  I        105  i
 10  LF  (NL line feed, new line)    42  *   x      74  J        106  j
 11  VT  (vertical tab)              43  +          75  K        107  k
 12  FF  (NP form feed, new page)    44  ,   x      76  L        108  l
 13  CR  (carriage return)           45  -          77  M        109  m
 14  SO  (shift out)                 46  .   x      78  N        110  n
 15  SI  (shift in)                  47  /          79  O        111  o
 16  DLE (data link escape)          48  0          80  P        112  p
 17  DC1 (device control 1)          49  1          81  Q        113  q
 18  DC2 (device control 2)          50  2          82  R        114  r
 19  DC3 (device control 3)          51  3          83  S        115  s
 20  DC4 (device control 4)          52  4          84  T        116  t
 21  NAK (negative acknowledge)      53  5          85  U        117  u
 22  SYN (synchronous idle)          54  6          86  V        118  v
 23  ETB (end of trans. block)       55  7          87  W        119  w
 24  CAN (cancel)                    56  8          88  X        120  x
 25  EM  (end of medium)             57  9          89  Y        121  y
 26  SUB (substitute)                58  :   x      90  Z        122  z
 27  ESC (escape)                    59  ;   x      91  [        123  {   x
 28  FS  (file separator)            60  <   x      92  \        124  |
 29  GS  (group separator)           61  =   x      93  ]        125  }   x
 30  RS  (record separator)          62  >   x      94  ^   x    126  ~   x
 31  US  (unit separator)            63  ?   x      95  _        127  DEL x

*/  

***************************************************************//Creating the array//***************************************************************************       

         //space,A  ,B  ,C  ,D  , E , F , G , H ,  I, J, K , L , M ,  N, O , P , Q ,  R, S ,  T, U , V, W , X , Y , Z//
int SO1arr[]={ 0,110,158,114,158,114, 98,122,108,128,60, 96,112,108,108,126,102,126,102, 90,130,124,96,108,  0,  0,18};
int SO2arr[]={ 0, 68, 20,  0, 16, 68, 64,  4, 68,16, 0, 74,  0,130,136,  0, 68,  8, 76, 68, 16,  0,34, 40,170,146,34};
          //   0, 1 ,2  , 3 , 4 , 5 , 6 , 7 , 8 , 9,10,11 ,12 ,13 , 14, 15,16 ,17 ,18 ,19 ,20,21 ,22,23 ,24 ,25 ,26//
          
           // 00 ,01, 02,03 ,04, 05, 06, 07, 08,09//
int SO1brr[]={126,12, 54, 30,76, 82,122, 14,126,94};  
int SO2brr[]={ 34, 0, 68,  4,68, 72, 68,  0, 68,68};
          // 1 ,2 ,3 ,4 ,5  ,6 ,7  ,8  ,9  ,10//
                  
int invalid[]={33,34,35,36,37,38,39,42,44,46,58,59,60,61,62,63,64,94,96,123,125,126,127};

int datapin1=13;
int latchpin1=12;
int clockpin1=11;

int datapin2=10;
int latchpin2=9;
int clockpin2=8;


int ch;
void setup() {
  myGSM.begin(9600);//for Setting the GSM baud rate
  Serial.begin(9600);//for setting the baud rate for Serial port of arduino
  delay(1000);
  pinMode(clockpin1,OUTPUT);
  pinMode(clockpin2,OUTPUT);
  pinMode(datapin1,OUTPUT);
  pinMode(datapin2,OUTPUT);
  pinMode(latchpin1,OUTPUT);
  pinMode(latchpin2,OUTPUT);

 gsm_init(); // initialising the gsm modem
  
Serial.print("setting the GSM modem for receiving mode");
myGSM.println("AT+CNMI=2,2,0,0,0"); // AT Command to receive a live SMS
delay(1000);
}

void loop() 
{
char c;

 for(unsigned int t=0;t<60000;t++)
  {
    serialEvent();
 
  if(temp==1)
  {
    x=0,k=0,temp=0;
    while(x<i)
    {
      while(str[x]=='#')
      {
        x++;
        while(str[x]!='*')
        {
          msg[k++]=str[x++];
        }
      }
      x++;
    }
    msg[k]='\0';
   // lcd.clear();
   // lcd.print(msg);  //printing the message to the lcd display 

int i=0;

while(msg[i]!='\0') //null character
{
if((int)msg[i]>=65&&(int)msg[i]<=90)
{
  int idx=msg[i]-65+1;
  printchar1(SO1arr[idx],SO2arr[idx]);
}

else if((int)msg[i]>=48&&(int)msg[i]<=57)
{
  int idx=msg[i]-48;
  printchar2(SO1brr[idx],SO2brr[idx]);
 }
i++;
 }
    delay(1000);
    temp=0;
    i=0;
    x=0;
    k=0;
  }
  }
}

//*****************************************************************For reading the character*****************************************************************************************
void serialEvent()
{int temp;
  while(myGSM.available())
  {
    char ch=(char)myGSM.read();
    str[i++]=ch;
    if(ch == '*')
    {
      temp=1;
     // lcd.clear();
     // lcd.print("Message Received");
      delay(1000);
    }
  }
}

//******************************************************************Initialising the GSM modem*********************************************************************************************
void gsm_init()
{
  boolean at_flag=1;
  while(at_flag)
  {
    Serial.println("AT");
    while(Serial.available()>0)
    {
      if(Serial.find("OK"))
      at_flag=0;
    }
    delay(1000);
  }
  boolean echo_flag=1;
  while(echo_flag)
  {
    Serial.println("ATE0");
    while(Serial.available()>0)
    {
      if(Serial.find("OK"))
      echo_flag=0;
    }
    delay(1000);
  }
 
  delay(1000);
  boolean net_flag=1;
  while(net_flag)
  {
    Serial.println("AT+CPIN?");
    while(Serial.available()>0)
    {
      if(Serial.find("+CPIN: READY"))
      net_flag=0;
    }
    delay(1000);
  }
  delay(1000);
}

*******************************************************************************//Printing the characters//*************************************************************
void printchar1(int SO1arr,int SO2arr)
{
  //for shift register 1//
 digitalWrite(latchpin1,LOW);
 shiftOut(datapin1,clockpin1,MSBFIRST,SO1arr);
 digitalWrite(latchpin1,HIGH);

 //for shift register 2//
 digitalWrite(latchpin2,LOW);
 shiftOut(datapin2,clockpin2,MSBFIRST,SO2arr);
 digitalWrite(latchpin2,HIGH);   
    delay(1000);
  }

void printchar2(int SO1brr, int SO2brr)
{
 //for shift register 1//
 digitalWrite(latchpin1,LOW);
 shiftOut(datapin1,clockpin1,MSBFIRST,SO1brr);
 digitalWrite(latchpin1,HIGH);

 //for shift register 2//
 digitalWrite(latchpin2,LOW);
 shiftOut(datapin2,clockpin2,MSBFIRST,SO2brr);
 digitalWrite(latchpin2,HIGH);   
    delay(1000); 
  
  }

***********************************************************************//Clearing the buffer_array//*************************************************************
void clearBufferArray()
{
 for(int i=0; i<count; i++)
 {
  buffer[i]=NULL;
  } 
}
